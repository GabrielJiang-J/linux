.. SPDX-License-Identifier: GPL-2.0

.. include:: ../disclaimer-zh_CN.rst

.. _active_mm:

:Original: Documentation/vm/active_mm.rst

:译者:

 蒋子奇 Jiang Ziqi <jiangziqi@360.cn>


=========
Active MM
=========

::

 List:       linux-kernel
 Subject:    Re: active_mm
 From:       Linus Torvalds <torvalds () transmeta ! com>
 Date:       1999-07-30 21:36:24

 抄送到linux内核，因为我不经常写解释，当我写的时候，我感觉更好，更多的人
 阅读它们。

 1999年7月30日，星期五，David Mosberger写道：
 >
 > 有没有一个关于“mm”和“active_mm”在task_struct应该如何被使用吗？
 > (如果在邮件列表中讨论了这个问题，我很抱歉--我刚度假回来，
 >  有一段时间没有关注内核社区了)。

 基本上，新的设置是：

  - 我们有“真实地址空间”和“匿名地址空间”。不同之处在于匿名地址空间根本不
    关心用户级页表，所以当我们进行到匿名地址空间的上下文切换时，我们只需
    要保持前一个地址空间处于活动状态。

    “匿名地址空间”的明显用途是任何不需要任何用户映射的线程--所有内核线程
    基本上都属于这一类，但即使是“真正的”线程也会临时表示，在一段时间内，
    它们不会对用户空间感兴趣，调度器可能会尽量避免在切换VM状态上浪费时间。
    目前只有老式的bdflush同步可以做到这一点。

  - “tsk->mm”指向“真实地址空间”。对于匿名进程，tsk->mm将为NULL，因为匿名
    进程实际上根本没有真正的地址空间。

  - 然而，我们显然需要跟踪我们为这样一个匿名用户“窃取”了哪个地址空间。为
    此，我们有“tsk->active_mm”，它显示了当前活动的地址空间是什么。

    规则是，对于一个具有真实地址空间的进程(例如，tsk->mm非null)， 
    active_mm显然总是必须与真实的相同。

    对于匿名进程，tsk->mm == NULL, tsk->active_mm为匿名进程运行时“借来的”
    mm。当匿名进程被调度出去时，所借用的地址空间将被返回并清除。

 为了支持这一切，“struct mm_struct”现在有两个计数器：一个是“mm_users”计数
 器，这是有多少“真实地址空间用户”；一个是“mm_count”计数器，这是“懒惰”用户
 (即匿名用户)的数量，如果有任何真实用户，则加1。

 通常至少有一个真正的用户，但也可能是真正的用户在另一个CPU上退出，而懒惰
 用户仍然是活动的，所以你确实会遇到这样的情况，你有一个地址空间是仅仅被
 懒惰用户使用的。这通常是一个短暂的状态，因为一旦该线程被调度为一个真正的
 线程，“僵尸”mm就会被释放，因为“mm_count”变成了零。

 另外，一个新规则是：没有人会把“init_mm”当作真正的MM。“init_mm”应该被认为
 只是一个“当没有其他上下文可用时的惰性上下文”，事实上它主要是在启动时使用
 的，当还没有真正的VM被创建时。这是用来检查的代码

 	if (current->mm == &init_mm)

 应该应该以

 	if (!current->mm)

 替代(无论如何这更有意义-测试基本上是一个“我们有一个用户上下文”，并且通常
 是由页面错误处理程序和类似的事情完成)。

 无论如何，我刚刚把pre-patch-2.3.13-1上传到ftp.kernel.org，因为它稍微改变
 了接口，以适应alpha（谁会想到它,但alpha实际上最终的最丑的上下文切换代码--
 与其他架构的MM和寄存器状态是分开的，alpha PALcode将两者连接起来，你需要将
 两者切换到一起）。

 (来自 http://marc.info/?l=linux-kernel&m=93337278602211&w=2)
