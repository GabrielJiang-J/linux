.. SPDX-License-Identifier: GPL-2.0

.. include:: ../disclaimer-zh_CN.rst

.. _balance:

:Original: Documentation/vm/balance.rst

:译者:

 蒋子奇 Jiang Ziqi <jiangziqi@360.cn>


========
内存均衡
========

Started Jan 2000 by Kanoj Sarcar <kanoj@sgi.com>

内存均衡为!__GFP_ATOMIC和!__GFP_KSWAPD_RECLAIM以及非__GFP_IO分配而存在。

调用者可能避免回收的第一个原因是调用者由于持有自旋锁或处于中断上下文中而不能
睡眠。第二种可能是调用者愿意在不引起页面回收开销的情况下分配失败。这种情况可
能发生在随机的的、具有order-0回退选项的高阶分配请求上。在这种情况下，调用者
也可能希望避免唤醒kswapd。

__GFP_IO分配请求是为了防止文件系统死锁。

在缺乏非休眠分配请求的情况下，进行均衡似乎是有害的。页面回收可以惰性地启
动，也就是说，只有在需要时（即区域空闲内存为0），而不是使其成为一个活动的进程。

也就是说，内核应该尝试满足直接映射池对直接映射页的请求，而不是退回到dma池，以
便为dma请求（原子或非原子）填充dma池。类似的论点适用于高端内存和直接映射页。
如果有很多空闲dma页，最好通过从dma池中分配一个来满足常规内存请求，而不是引起
常规区域平衡的开销。

在2.2中，内存均衡/页面回收只有在空闲页面的总数低于总内存的1/64时才会启动。
如果dma和常规内存的比例正确，那么即使dma区域完全为空，也很可能不会实现均衡。
2.2一直运行在不同内存大小的生产机器，即使存在这个问题，它似乎也运行得很好。
在2.3中，由于高端内存的存在，这个问题更加严重。

在2.3中，区域均衡可以通过两种方式中的一种来实现：根据区域大小（可能还包括低级
区域的大小），我们可以在初始化时决定在均衡任何区域时应该以空闲页面数量为目标。
好的方面是，在均衡的时候，我们不需要考虑低等级区域的大小，坏的方面是，我们可
能因为忽略了低等级区域可能的低使用率而过于频繁地进行均衡。另外，只要在分配例
程中稍加更改，就可以将memclass()宏简化为一个简单的相等操作。

另一种可能的解决方案是，只有当一个区域的空闲内存和它所有的低级区域的空闲内存
低于该区域和它的低级区域的总内存的1/64时，我们才进行均衡。这修复了2.2的均衡
问题，并尽可能保持与2.2的行为相近。此外，该均衡算法在具有不同数量和类型的区域
的不同架构上的工作方式是相同的。如果我们想要更精致，我们可以在将来为不同区域
的空闲页面分配不同的权重。

注意，如果常规区域的大小比dma区域大，那么在决定是否均衡常规区域时考虑空闲dma页
就不那么重要了。第一个解决方案会变得更有吸引力。

附加的补丁实现了第二个解决方案。它还“修复”了两个问题：首先，kswapd会像2.2中那
样在非休眠分配的低内存条件下被唤醒。其次，高端内存区域也是均衡的，以便为
replace_with_highmem()提供获得高端内存页面的机会，并确保高端内存分配不会回到
常规区域。这也确保了高端内存页不会泄漏（例如，在高端内存页位于交换缓存中但没
有被任何人使用的情况下）。

kswapd还需要知道它应该均衡的区域。kswapd主要用于无法实现均衡的情况，可能是因为
所有分配请求都来自内部上下文，而所有进程上下文都处于休眠状态。对于2.3，kswapd
实际上不需要均衡高端内存区域，因为中断上下文不请求高端内存页面。kswapd查看zone
结构中的zone_wake_kswapd字段来决定一个zone是否需要均衡。

如果窃取页面可以减轻页面节点中低于其水位的任何区域的内存压力，则从进程内存和
共享内存窃取页面就可以完成。

watemark[WMARK_MIN/WMARK_LOW/WMARK_HIGH]/low_on_memory/zone_wake_kswapd：这些是
每个zone的字段，用于确定何时需要均衡一个zone。当页面数量低于水位[WMARK_MIN]时，
将设置字段low_on_memory。直到空闲页面的数量变成水位[WMARK_HIGH]，这个值才会被设置。
当设置了low_on_memory时，页面分配请求将尝试释放区域中的一些页面（提供请求中设置了
GFP_WAIT）。与此正交的是，决定唤醒kswapd来释放一些区域页面。该决定不是基于延时，
而是在空闲页面数量低于水位[WMARK_LOW]时做出的；在这种情况下，还设置了zone_wake_kswapd。


（好）我听到的想法：

1. 动态性应该影响均衡：一个区域的失败请求数量可以被跟踪并反馈到均衡方案中 (jalvo@mbay.net)
2. 实现函数replace_with_highmem()-类似replace_with_regular()，预留dma页面。(lkd@tantalophile.demon.co.uk)
